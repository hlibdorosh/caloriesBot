from telegram import ReplyKeyboardMarkup, Update
from telegram.ext import ContextTypes
from db import SessionLocal, Parameters
from telegram.ext import ConversationHandler

from db import SessionLocal, Parameters
from utils import calculate_daily_calories

HEIGHT, WEIGHT, AGE, SEX, GOAL = range(5)

# –†–æ—Å—Ç
async def start_height(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç (–≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö):")
    return HEIGHT

async def set_height(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        height = int(update.message.text)
        session = SessionLocal()
        telegram_id = update.message.from_user.id
        user = session.query(Parameters).filter_by(telegram_id=telegram_id).first()
        if not user:
            user = Parameters(telegram_id=telegram_id, height=height)
            session.add(user)
        else:
            user.height = height

        user.daily_calories = calculate_daily_calories(user.weight, user.height, user.age, user.sex, user.goal)
        session.commit()
        session.close()
        await update.message.reply_text("–†–æ—Å—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω ‚úÖ")
        return ConversationHandler.END
    except ValueError:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return HEIGHT

# –í–µ—Å
async def start_weight(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–µ—Å (–≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö):")
    return WEIGHT

async def set_weight(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        weight = float(update.message.text)
        session = SessionLocal()
        telegram_id = update.message.from_user.id
        user = session.query(Parameters).filter_by(telegram_id=telegram_id).first()
        if not user:
            user = Parameters(telegram_id=telegram_id, weight=weight)
            session.add(user)
        else:
            user.weight = weight

        user.daily_calories = calculate_daily_calories(user.weight, user.height, user.age, user.sex, user.goal)
        session.commit()
        session.close()
        await update.message.reply_text("–í–µ—Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω ‚úÖ")
        return ConversationHandler.END
    except ValueError:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return WEIGHT

# –í–æ–∑—Ä–∞—Å—Ç
async def start_age(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç (–≤ –ø–æ–ª–Ω—ã—Ö –≥–æ–¥–∞—Ö):")
    return AGE

async def set_age(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        age = int(update.message.text)
        session = SessionLocal()
        telegram_id = update.message.from_user.id
        user = session.query(Parameters).filter_by(telegram_id=telegram_id).first()
        if not user:
            user = Parameters(telegram_id=telegram_id, age=age)
            session.add(user)
        else:
            user.age = age

        user.daily_calories = calculate_daily_calories(user.weight, user.height, user.age, user.sex, user.goal)
        session.commit()
        session.close()
        await update.message.reply_text("–í–æ–∑—Ä–∞—Å—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω ‚úÖ")
        return ConversationHandler.END
    except ValueError:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return AGE

# –ü–æ–ª
async def start_sex_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [["–ú—É–∂—Å–∫–æ–π üöπ", "–ñ–µ–Ω—Å–∫–∏–π üö∫"]]
    markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø–æ–ª:", reply_markup=markup)
    return SEX

async def set_sex(update: Update, context: ContextTypes.DEFAULT_TYPE):
    sex_text = update.message.text.strip().lower()
    if sex_text not in ["–º—É–∂—Å–∫–æ–π üöπ", "–∂–µ–Ω—Å–∫–∏–π üö∫"]:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç —Å –∫–Ω–æ–ø–∫–∏.")
        return SEX

    session = SessionLocal()
    telegram_id = update.message.from_user.id
    user = session.query(Parameters).filter_by(telegram_id=telegram_id).first()
    if not user:
        user = Parameters(telegram_id=telegram_id, sex=sex_text)
        session.add(user)
    else:
        user.sex = sex_text

    user.daily_calories = calculate_daily_calories(user.weight, user.height, user.age, user.sex, user.goal)
    session.commit()
    session.close()

    await update.message.reply_text("–ü–æ–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω ‚úÖ")

    # ‚¨á –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    keyboard = [
        ["‚¨ÜÔ∏è –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–æ—Å—Ç", "‚öñ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–µ—Å"],
        ["üìÖ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–æ–∑—Ä–∞—Å—Ç", "üöª –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–ª"],
        ["üéØ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–µ–ª—å", "ü§ñ –°–ø—Ä–æ—Å–∏—Ç—å GPT"], ["üçΩ –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏—ë–º –ø–∏—â–∏"]
    ]
    markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä:", reply_markup=markup)

    return ConversationHandler.END


# –¶–µ–ª—å
async def start_goal_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [["–ü–æ–¥–¥–µ—Ä–∂–∫–∞ ‚û°Ô∏è", "–ù–∞–±–æ—Ä –º–∞—Å—Å—ã ‚¨ÜÔ∏è", "–ü–æ—Ö—É–¥–µ–Ω–∏–µ ‚¨áÔ∏è"]]
    markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ü–µ–ª—å:", reply_markup=markup)
    return GOAL

async def set_goal(update: Update, context: ContextTypes.DEFAULT_TYPE):
    goal_text = update.message.text.strip().lower()
    goal_map = {
        "–ø–æ–¥–¥–µ—Ä–∂–∫–∞ ‚û°Ô∏è": "maintain",
        "–Ω–∞–±–æ—Ä –º–∞—Å—Å—ã ‚¨ÜÔ∏è": "gain",
        "–ø–æ—Ö—É–¥–µ–Ω–∏–µ ‚¨áÔ∏è": "lose"
    }
    if goal_text not in goal_map:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª—å —Å –∫–Ω–æ–ø–∫–∏.")
        return GOAL
    session = SessionLocal()
    telegram_id = update.message.from_user.id
    user = session.query(Parameters).filter_by(telegram_id=telegram_id).first()
    if not user:
        user = Parameters(telegram_id=telegram_id, goal=goal_map[goal_text])
        session.add(user)
    else:
        user.goal = goal_map[goal_text]

    user.daily_calories = calculate_daily_calories(user.weight, user.height, user.age, user.sex, user.goal)

    session.commit()
    session.close()
    await update.message.reply_text("–¶–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ ‚úÖ")
    keyboard = [
        ["‚¨ÜÔ∏è –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–æ—Å—Ç", "‚öñ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–µ—Å"],
        ["üìÖ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–æ–∑—Ä–∞—Å—Ç", "üöª –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–ª"],
        ["üéØ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–µ–ª—å", "ü§ñ –°–ø—Ä–æ—Å–∏—Ç—å GPT"], ["üçΩ –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏—ë–º –ø–∏—â–∏"]
    ]
    markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä:", reply_markup=markup)

    return ConversationHandler.END
    return ConversationHandler.END


