import os
import openai
from openai import AsyncOpenAI
from db import init_db, SessionLocal, Parameters, Intake

from openai_utils import chat_with_openai


from dotenv import load_dotenv
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
from telegram import ReplyKeyboardMarkup
from telegram.ext import ConversationHandler
from meal_analysis import get_meal_conv_handler

from datetime import date, timedelta
from db import SessionLocal, Parameters, DailyLog


load_dotenv()

TELEGRAM_API_KEY = os.getenv("TELEGRAM_API_KEY")

from parameter_handlers import (
    start_height, set_height,
    start_weight, set_weight,
    start_age, set_age,
    start_sex_input, set_sex,
    start_goal_input, set_goal,
    HEIGHT, WEIGHT, AGE, SEX, GOAL
)




# Load .env
load_dotenv()

# Set API keys
HEIGHT, WEIGHT, AGE, SEX, GOAL = range(5)
ASK_GPT = 5
ASK_MEAL_DESCRIPTION = 10


######################/ commands##############################
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = (
        "üÜò <b>–°–ø—Ä–∞–≤–∫–∞</b>\n\n"
        "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –∏ –¥–µ–π—Å—Ç–≤–∏—è:</b>\n"
        "/start ‚Äì –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∏ –æ—Ç–∫—Ä—ã—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "/help ‚Äì –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n"
        "üìã –¢–∞–∫–∂–µ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫–∏:\n"
        "‚Ä¢ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–æ—Å—Ç, –≤–µ—Å, –≤–æ–∑—Ä–∞—Å—Ç, –ø–æ–ª –∏ —Ü–µ–ª—å\n"
        "‚Ä¢ –°–ø—Ä–æ—Å–∏—Ç—å GPT ‚Äì –∑–∞–¥–∞—Ç—å –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å\n"
        "‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏—ë–º –ø–∏—â–∏ ‚Äì –±–æ—Ç —Ä–∞—Å—Å—á–∏—Ç–∞–µ—Ç –ë–ñ–£ –∏ –∫–∞–ª–æ—Ä–∏–∏\n\n"
        "‚ÑπÔ∏è –ü–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –ø—Ä–∏—ë–º–∞ –ø–∏—â–∏ –±–æ—Ç —Å—á–∏—Ç–∞–µ—Ç, —Å–∫–æ–ª—å–∫–æ –≤—ã —É–∂–µ —Å—ä–µ–ª–∏ –∑–∞ –¥–µ–Ω—å."
    )
    await update.message.reply_text(help_text, parse_mode="HTML")


async def show_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    telegram_id = update.message.from_user.id
    session = SessionLocal()
    try:
        # —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        user = session.query(Parameters).filter_by(telegram_id=telegram_id).first()
        if not user:
            await update.message.reply_text("üì≠ –î–∞–Ω–Ω—ã–µ –æ –≤–∞—Å –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –°–Ω–∞—á–∞–ª–∞ –∑–∞–¥–∞–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.")
            return

        today = date.today()
        consumed = user.consumed_today or 0
        advised = user.daily_calories or 0

        # –∏—Å—Ç–æ—Ä–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π (–±–µ–∑ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ)
        history = (
            session.query(DailyLog)
            .filter(DailyLog.telegram_id == telegram_id, DailyLog.date < today)
            .order_by(DailyLog.date.desc())
            .limit(7)
            .all()
        )

        msg = [f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∏—Ç–∞–Ω–∏—è*\n",
               f"–°–µ–≥–æ–¥–Ω—è ({today}): {consumed} / {advised} –∫–∫–∞–ª\n"]

        if history:
            msg.append("\nüóì –ò—Å—Ç–æ—Ä–∏—è:")
            for h in history:
                msg.append(f"{h.date}: {h.consumed_calories} / {h.advised_calories} –∫–∫–∞–ª")

        await update.message.reply_text("\n".join(msg), parse_mode="Markdown")
    finally:
        session.close()









########################## OpenAI call #######################
async def chat_with_openai(message):
    try:
        client = AsyncOpenAI(api_key=os.getenv("OPENAI_API_KEY"))

        response = await client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": message}]
        )

        return response.choices[0].message.content
    except Exception as e:
        return f"–û—à–∏–±–∫–∞: {str(e)}"


async def start_ask_gpt(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –¥–ª—è GPT:")
    return ASK_GPT

async def handle_gpt_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_input = update.message.text
    telegram_id = update.message.from_user.id

    session = SessionLocal()
    user = session.query(Parameters).filter_by(telegram_id=telegram_id).first()
    session.close()

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    user_context = ""
    if user:
        user_context = (
            f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:\n"
            f"- –†–æ—Å—Ç: {user.height} —Å–º\n"
            f"- –í–µ—Å: {user.weight} –∫–≥\n"
            f"- –í–æ–∑—Ä–∞—Å—Ç: {user.age} –ª–µ—Ç\n"
            f"- –ü–æ–ª: {user.sex}\n"
            f"- –¶–µ–ª—å: {user.goal}\n\n"
            f"- –ö–∞–ª–æ—Ä–∏–∏ –≤ –¥–µ–Ω—å: {user.daily_calories} –∫–∫–∞–ª\n\n"
            f"- –ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è: {user.consumed_today} –∫–∫–∞–ª\n\n"
        )

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ GPT
    full_prompt = user_context + "–í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n" + user_input
    await update.message.reply_text("‚è≥ –í–∞—à –¥–∏–µ—Ç–æ–ª–æ–≥ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é...")

    response = await chat_with_openai(full_prompt)

    await update.message.reply_text(response)

    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å–Ω–æ–≤–∞
    keyboard = [
        ["‚¨ÜÔ∏è –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–æ—Å—Ç", "‚öñ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–µ—Å"],
        ["üìÖ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–æ–∑—Ä–∞—Å—Ç", "üöª –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–ª"],
        ["üéØ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–µ–ª—å", "ü§ñ –°–ø—Ä–æ—Å–∏—Ç—å GPT"], ["üçΩ –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏—ë–º –ø–∏—â–∏"]
    ]
    markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

    return ConversationHandler.END




async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        ["‚¨ÜÔ∏è –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–æ—Å—Ç", "‚öñ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–µ—Å"],
        ["üìÖ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–æ–∑—Ä–∞—Å—Ç", "üöª –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–ª"],
        ["üéØ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–µ–ª—å", "ü§ñ –°–ø—Ä–æ—Å–∏—Ç—å GPT"], ["üçΩ –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏—ë–º –ø–∏—â–∏"]
    ]
    markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏:", reply_markup=markup)


# main
def main():
    init_db()
    app = ApplicationBuilder().token(TELEGRAM_API_KEY).build()

    # üëá Conversation handler –î–û–õ–ñ–ï–ù –±—ã—Ç—å –î–û run_polling()
    height_conv = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–æ—Å—Ç"), start_height)],
        states={HEIGHT: [MessageHandler(filters.TEXT & ~filters.COMMAND, set_height)]},
        fallbacks=[]
    )

    weight_conv = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–µ—Å"), start_weight)],
        states={WEIGHT: [MessageHandler(filters.TEXT & ~filters.COMMAND, set_weight)]},
        fallbacks=[]
    )

    age_conv = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–æ–∑—Ä–∞—Å—Ç"), start_age)],
        states={AGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, set_age)]},
        fallbacks=[]
    )

    sex_conv = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–ª"), start_sex_input)],
        states={SEX: [MessageHandler(filters.TEXT & ~filters.COMMAND, set_sex)]},
        fallbacks=[]
    )

    goal_conv = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–µ–ª—å"), start_goal_input)],
        states={GOAL: [MessageHandler(filters.TEXT & ~filters.COMMAND, set_goal)]},
        fallbacks=[]
    )

    gpt_conv = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("–°–ø—Ä–æ—Å–∏—Ç—å GPT"), start_ask_gpt)],
        states={ASK_GPT: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_gpt_question)]},
        fallbacks=[]
    )


    app.add_handler(goal_conv)

    # üëâ –°–Ω–∞—á–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Å–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã
    app.add_handler(CommandHandler("start", start))

    # üëâ –¢–æ–ª—å–∫–æ –ø–æ—Ç–æ–º –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    app.add_handler(height_conv)
    app.add_handler(weight_conv)
    app.add_handler(age_conv)
    app.add_handler(sex_conv)
    app.add_handler(goal_conv)
    app.add_handler(gpt_conv)
    app.add_handler(get_meal_conv_handler())
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("stats", show_stats))

    app.run_polling()


if __name__ == "__main__":
    main()
